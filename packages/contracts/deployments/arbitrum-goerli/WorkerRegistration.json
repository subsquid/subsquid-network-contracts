{
  "address": "0xA7E47a7aE0FB29BeF4485f6CAb2ee1b85c1D38aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tSQD",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_epochLengthBlocks",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deregistedAt",
          "type": "uint256"
        }
      ],
      "name": "WorkerDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WorkerWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOND_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeWorkerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "deregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveWorkerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveWorkers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "peerId",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "registeredAt",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "deregisteredAt",
              "type": "uint128"
            }
          ],
          "internalType": "struct WorkerRegistration.Worker[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllWorkersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getWorkerByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "peerId",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "registeredAt",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "deregisteredAt",
              "type": "uint128"
            }
          ],
          "internalType": "struct WorkerRegistration.Worker",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tSQD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "workerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "registeredAt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "deregisteredAt",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a1104ff655ae5ea8fc268c0da988a3a0fe9deaae268f2bf7db7b7772b9e4eaf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xedFa74C6bC620CC992d4D2C9A27803748B8f5a64",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "10576106",
    "logsBloom": "0x
    "blockHash": "0x5fab00ec589962d7713f397fffad291d5b17a5ac4157d84e0604232cecefb13a",
    "transactionHash": "0x1a1104ff655ae5ea8fc268c0da988a3a0fe9deaae268f2bf7db7b7772b9e4eaf",
    "logs": [],
    "blockNumber": 29953046,
    "cumulativeGasUsed": "10576106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6a117CBe9Bfab42151396FC54ddb588151a8Aac7",
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "4748128410615c77f58b8d981c2a2cb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tSQD\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_epochLengthBlocks\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deregistedAt\",\"type\":\"uint256\"}],\"name\":\"WorkerDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WorkerWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOND_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeWorkerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"deregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveWorkerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveWorkers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"internalType\":\"struct WorkerRegistration.Worker[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWorkersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWorkerByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"internalType\":\"struct WorkerRegistration.Worker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tSQD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"workerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WorkerRegistration.sol\":\"WorkerRegistration\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/WorkerRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\ncontract WorkerRegistration {\\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BOND_AMOUNT = 100000 * 10**18;\\n    // uint256 public constant EPOCH_LENGTH = 20700; // approximately 72 hours in blocks\\n    // uint256 public constant LOCK_PERIOD = EPOCH_LENGTH;\\n\\n\\n    IERC20 public tSQD;\\n    uint128 public immutable epochLength;\\n    uint128 public immutable lockPeriod;\\n\\n    Counters.Counter private workerIdTracker;\\n\\n    struct Worker {\\n        address creator;\\n        bytes peerId;\\n        uint256 bond;\\n        // the worker is registered at the start\\n        // of the next epoch, after register() is called\\n        uint128 registeredAt;\\n        // the worker is de-registered at the start of\\n        // the next epoch, after deregister() is called\\n        uint128 deregisteredAt;\\n    }\\n\\n    mapping(uint256 => Worker) public workers;\\n    mapping(address creator => mapping(bytes peerId => uint256 id)) public workerIds;\\n    uint256[] public activeWorkerIds;\\n\\n    event WorkerRegistered(uint256 indexed workerId, bytes indexed peerId, address indexed registrar, uint256 registeredAt);\\n    event WorkerDeregistered(uint256 indexed workerId, address indexed account, uint256 deregistedAt);\\n    event WorkerWithdrawn(uint256 indexed workerId, address indexed account);\\n\\n    constructor(IERC20 _tSQD, uint128 _epochLengthBlocks) {\\n        tSQD = _tSQD;\\n        epochLength = _epochLengthBlocks;\\n        lockPeriod = _epochLengthBlocks;\\n    }\\n\\n    function register(bytes calldata peerId) external {\\n        require(peerId.length <= 64, \\\"Peer ID too large\\\");\\n        require(workerIds[msg.sender][peerId] == 0, \\\"Worker already registered\\\");\\n\\n        workerIdTracker.increment();\\n        uint256 workerId = workerIdTracker.current();\\n\\n        workers[workerId] = Worker({\\n            creator: msg.sender,\\n            peerId: peerId,\\n            bond: BOND_AMOUNT,\\n            registeredAt: nextEpoch(),\\n            deregisteredAt: 0\\n        });\\n\\n        workerIds[msg.sender][peerId] = workerId;\\n        activeWorkerIds.push(workerId);\\n\\n        tSQD.transferFrom(msg.sender, address(this), BOND_AMOUNT);\\n        emit WorkerRegistered(workerId, peerId, msg.sender, workers[workerId].registeredAt);\\n    }\\n\\n    function deregister(bytes calldata peerId) external {\\n        uint256 workerId = workerIds[msg.sender][peerId];\\n        require(workerId != 0, \\\"Worker not registered\\\");\\n        require(isWorkerActive(workers[workerId]), \\\"Worker not active\\\");\\n\\n        workers[workerId].deregisteredAt = nextEpoch();\\n\\n        // Remove the workerId from the activeWorkerIds array\\n        for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n            if (activeWorkerIds[i] == workerId) {\\n                activeWorkerIds[i] = activeWorkerIds[activeWorkerIds.length - 1];\\n                activeWorkerIds.pop();\\n                break;\\n            }\\n        }\\n\\n        emit WorkerDeregistered(workerId, msg.sender, workers[workerId].deregisteredAt);\\n    }\\n\\n    function withdraw(bytes calldata peerId) external {\\n        uint256 workerId = workerIds[msg.sender][peerId];\\n        require(workerId != 0, \\\"Worker not registered\\\");\\n        Worker storage worker = workers[workerId];\\n        require(!isWorkerActive(worker), \\\"Worker is active\\\");\\n        require(block.number >= worker.deregisteredAt + lockPeriod, \\\"Worker is locked\\\");\\n\\n        uint256 bond = worker.bond;\\n        delete workers[workerId];\\n        delete workerIds[msg.sender][peerId];\\n\\n        tSQD.transfer(msg.sender, bond);\\n\\n        emit WorkerWithdrawn(workerId, msg.sender);\\n    }\\n\\n    function nextEpoch() internal view returns (uint128) {\\n        return (uint128(block.number) / epochLength + 1) * epochLength;\\n    }\\n\\n    function getActiveWorkers() external view returns (Worker[] memory) {\\n        Worker[] memory activeWorkers = new Worker[](getActiveWorkerCount());\\n\\n        uint256 activeIndex = 0;\\n        for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n            uint256 workerId = activeWorkerIds[i];\\n            Worker storage worker = workers[workerId];\\n            if (isWorkerActive(worker)) {\\n                activeWorkers[activeIndex] = worker;\\n                activeIndex++;\\n            }\\n        }\\n\\n        return activeWorkers;\\n    }\\n\\n    function isWorkerActive(Worker storage worker) internal view returns (bool) {\\n        return worker.registeredAt <= block.number && (worker.deregisteredAt == 0 || worker.deregisteredAt >= block.number);\\n    }\\n\\n    function getActiveWorkerCount() public view returns (uint256) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n            uint256 workerId = activeWorkerIds[i];\\n            Worker storage worker = workers[workerId];\\n            if (isWorkerActive(worker)) {\\n                activeCount++;\\n            }\\n        }\\n        return activeCount;\\n    }\\n\\n    function getWorkerByIndex(uint256 index) external view returns (Worker memory) {\\n        require(index < activeWorkerIds.length, \\\"Index out of bounds\\\");\\n        uint256 workerId = activeWorkerIds[index];\\n        return workers[workerId];\\n    }\\n\\n    function getAllWorkersCount() external view returns (uint256) {\\n        return activeWorkerIds.length;\\n    }\\n}\\n\",\"keccak256\":\"0x4fd3dd60318f32c5712398850578daa27d0894f6d89b5348de913d156a4c85ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620029b3380380620029b38339818101604052810190620000379190620001a2565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806fffffffffffffffffffffffffffffffff166080816fffffffffffffffffffffffffffffffff1681525050806fffffffffffffffffffffffffffffffff1660a0816fffffffffffffffffffffffffffffffff16815250505050620001e9565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010982620000dc565b9050919050565b60006200011d82620000fc565b9050919050565b6200012f8162000110565b81146200013b57600080fd5b50565b6000815190506200014f8162000124565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6200017c8162000155565b81146200018857600080fd5b50565b6000815190506200019c8162000171565b92915050565b60008060408385031215620001bc57620001bb620000d7565b5b6000620001cc858286016200013e565b9250506020620001df858286016200018b565b9150509250929050565b60805160a05161278f62000224600039600081816103e001526109cc0152600081816109f0015281816115b101526115d4015261278f6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637d46b1f21161008c578063b4d0a56411610066578063b4d0a5641461024d578063bcacc70a14610269578063f1a22dc214610287578063f905aaf6146102bb576100ea565b80637d46b1f2146101e357806382fbdc9c14610213578063a0f395d61461022f576100ea565b80633e556827116100c85780633e556827146101595780633fd8b02f1461017757806357d775f81461019557806363e996d2146101b3576100ea565b80630968f264146100ef5780630dad312b1461010b578063393bc3d91461013b575b600080fd5b61010960048036038101906101049190611756565b6102d9565b005b61012560048036038101906101209190611942565b61066d565b60405161013291906119b7565b60405180910390f35b6101436106a8565b6040516101509190611bd2565b60405180910390f35b61016161093f565b60405161016e91906119b7565b60405180910390f35b61017f6109ca565b60405161018c9190611c03565b60405180910390f35b61019d6109ee565b6040516101aa9190611c03565b60405180910390f35b6101cd60048036038101906101c89190611c4a565b610a12565b6040516101da91906119b7565b60405180910390f35b6101fd60048036038101906101f89190611c4a565b610a36565b60405161020a9190611ced565b60405180910390f35b61022d60048036038101906102289190611756565b610c54565b005b6102376110d9565b6040516102449190611d6e565b60405180910390f35b61026760048036038101906102629190611756565b6110fd565b005b61027161139e565b60405161027e91906119b7565b60405180910390f35b6102a1600480360381019061029c9190611c4a565b6113ac565b6040516102b2959493929190611de2565b60405180910390f35b6102c36114c2565b6040516102d091906119b7565b60405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838360405161032a929190611e6c565b90815260200160405180910390205490506000810361037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590611ee2565b60405180910390fd5b600060026000838152602001908152602001600020905061039e816114cf565b156103de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d590611f4e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160030160109054906101000a90046fffffffffffffffffffffffffffffffff1661042a9190611f9d565b6fffffffffffffffffffffffffffffffff1643101561047e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061202d565b60405180910390fd5b60008160020154905060026000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006104d29190611617565b60028201600090556003820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556003820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208585604051610571929190611e6c565b90815260200160405180910390206000905560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016105de92919061204d565b6020604051808303816000875af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062191906120ae565b503373ffffffffffffffffffffffffffffffffffffffff16837fb6ee3a0ef8982f0f296a13a075fe56e5fd8c1bc2282a3c5b54f12d514ed7a95660405160405180910390a35050505050565b600360205281600052604060002081805160208101820180518482526020830160208501208183528095505050505050600091509150505481565b606060006106b461093f565b67ffffffffffffffff8111156106cd576106cc611817565b5b60405190808252806020026020018201604052801561070657816020015b6106f3611657565b8152602001906001900390816106eb5790505b5090506000805b600480549050811015610936576000600482815481106107305761072f6120db565b5b90600052602060002001549050600060026000838152602001908152602001600020905061075d816114cf565b1561092157806040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546107d490612139565b80601f016020809104026020016040519081016040528092919081815260200182805461080090612139565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050858581518110610907576109066120db565b5b6020026020010181905250838061091d9061216a565b9450505b5050808061092e9061216a565b91505061070d565b50819250505090565b6000806000905060005b6004805490508110156109c25760006004828154811061096c5761096b6120db565b5b906000526020600020015490506000600260008381526020019081526020016000209050610999816114cf565b156109ad5783806109a99061216a565b9450505b505080806109ba9061216a565b915050610949565b508091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048181548110610a2257600080fd5b906000526020600020016000915090505481565b610a3e611657565b6004805490508210610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c906121fe565b60405180910390fd5b600060048381548110610a9b57610a9a6120db565b5b90600052602060002001549050600260008281526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610b2c90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5890612139565b8015610ba55780601f10610b7a57610100808354040283529160200191610ba5565b820191906000526020600020905b815481529060010190602001808311610b8857829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050915050919050565b6040828290501115610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c929061226a565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208383604051610cec929190611e6c565b90815260200160405180910390205414610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d32906122d6565b60405180910390fd5b610d456001611589565b6000610d51600161159f565b90506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200169152d02c7e14af68000008152602001610ddc6115ad565b6fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610e799190612498565b506040820151816002015560608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555090505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208484604051610f55929190611e6c565b908152602001604051809103902081905550600481908060018154018082558091505060019003906000526020600020016000909190919091505560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333069152d02c7e14af68000006040518463ffffffff1660e01b8152600401610ff79392919061256a565b6020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a91906120ae565b503373ffffffffffffffffffffffffffffffffffffffff168383604051611062929190611e6c565b6040518091039020827fe6c84295c123762f302ffd57e3ba60e58ec0fe975ed75209a8b9cbaee2934a176002600086815260200190815260200160002060030160009054906101000a90046fffffffffffffffffffffffffffffffff166040516110cc91906125d2565b60405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838360405161114e929190611e6c565b9081526020016040518091039020549050600081036111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990611ee2565b60405180910390fd5b6111bd600260008381526020019081526020016000206114cf565b6111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f390612639565b60405180910390fd5b6112046115ad565b6002600083815260200190815260200160002060030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060005b600480549050811015611317578160048281548110611275576112746120db565b5b90600052602060002001540361130457600460016004805490506112999190612659565b815481106112aa576112a96120db565b5b9060005260206000200154600482815481106112c9576112c86120db565b5b906000526020600020018190555060048054806112e9576112e861268d565b5b60019003818190600052602060002001600090559055611317565b808061130f9061216a565b915050611253565b503373ffffffffffffffffffffffffffffffffffffffff16817f4a7ca6c9178181481ac5c6e9ed0965213ae489c4aaf53323bd5e1f318a9d77c36002600085815260200190815260200160002060030160109054906101000a90046fffffffffffffffffffffffffffffffff1660405161139191906125d2565b60405180910390a3505050565b69152d02c7e14af680000081565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546113f590612139565b80601f016020809104026020016040519081016040528092919081815260200182805461142190612139565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b5050505050908060020154908060030160009054906101000a90046fffffffffffffffffffffffffffffffff16908060030160109054906101000a90046fffffffffffffffffffffffffffffffff16905085565b6000600480549050905090565b6000438260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611158015611582575060008260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614806115815750438260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b5b9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000060017f0000000000000000000000000000000000000000000000000000000000000000436115fe91906126eb565b6116089190611f9d565b611612919061271c565b905090565b50805461162390612139565b6000825580601f106116355750611654565b601f01602090049060005260206000209081019061165391906116c0565b5b50565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b5b808211156116d95760008160009055506001016116c1565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611716576117156116f1565b5b8235905067ffffffffffffffff811115611733576117326116f6565b5b60208301915083600182028301111561174f5761174e6116fb565b5b9250929050565b6000806020838503121561176d5761176c6116e7565b5b600083013567ffffffffffffffff81111561178b5761178a6116ec565b5b61179785828601611700565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ce826117a3565b9050919050565b6117de816117c3565b81146117e957600080fd5b50565b6000813590506117fb816117d5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61184f82611806565b810181811067ffffffffffffffff8211171561186e5761186d611817565b5b80604052505050565b60006118816116dd565b905061188d8282611846565b919050565b600067ffffffffffffffff8211156118ad576118ac611817565b5b6118b682611806565b9050602081019050919050565b82818337600083830152505050565b60006118e56118e084611892565b611877565b90508281526020810184848401111561190157611900611801565b5b61190c8482856118c3565b509392505050565b600082601f830112611929576119286116f1565b5b81356119398482602086016118d2565b91505092915050565b60008060408385031215611959576119586116e7565b5b6000611967858286016117ec565b925050602083013567ffffffffffffffff811115611988576119876116ec565b5b61199485828601611914565b9150509250929050565b6000819050919050565b6119b18161199e565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a07816117c3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a47578082015181840152602081019050611a2c565b60008484015250505050565b6000611a5e82611a0d565b611a688185611a18565b9350611a78818560208601611a29565b611a8181611806565b840191505092915050565b611a958161199e565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611ac081611a9b565b82525050565b600060a083016000830151611ade60008601826119fe565b5060208301518482036020860152611af68282611a53565b9150506040830151611b0b6040860182611a8c565b506060830151611b1e6060860182611ab7565b506080830151611b316080860182611ab7565b508091505092915050565b6000611b488383611ac6565b905092915050565b6000602082019050919050565b6000611b68826119d2565b611b7281856119dd565b935083602082028501611b84856119ee565b8060005b85811015611bc05784840389528151611ba18582611b3c565b9450611bac83611b50565b925060208a01995050600181019050611b88565b50829750879550505050505092915050565b60006020820190508181036000830152611bec8184611b5d565b905092915050565b611bfd81611a9b565b82525050565b6000602082019050611c186000830184611bf4565b92915050565b611c278161199e565b8114611c3257600080fd5b50565b600081359050611c4481611c1e565b92915050565b600060208284031215611c6057611c5f6116e7565b5b6000611c6e84828501611c35565b91505092915050565b600060a083016000830151611c8f60008601826119fe565b5060208301518482036020860152611ca78282611a53565b9150506040830151611cbc6040860182611a8c565b506060830151611ccf6060860182611ab7565b506080830151611ce26080860182611ab7565b508091505092915050565b60006020820190508181036000830152611d078184611c77565b905092915050565b6000819050919050565b6000611d34611d2f611d2a846117a3565b611d0f565b6117a3565b9050919050565b6000611d4682611d19565b9050919050565b6000611d5882611d3b565b9050919050565b611d6881611d4d565b82525050565b6000602082019050611d836000830184611d5f565b92915050565b611d92816117c3565b82525050565b600082825260208201905092915050565b6000611db482611a0d565b611dbe8185611d98565b9350611dce818560208601611a29565b611dd781611806565b840191505092915050565b600060a082019050611df76000830188611d89565b8181036020830152611e098187611da9565b9050611e1860408301866119a8565b611e256060830185611bf4565b611e326080830184611bf4565b9695505050505050565b600081905092915050565b6000611e538385611e3c565b9350611e608385846118c3565b82840190509392505050565b6000611e79828486611e47565b91508190509392505050565b600082825260208201905092915050565b7f576f726b6572206e6f7420726567697374657265640000000000000000000000600082015250565b6000611ecc601583611e85565b9150611ed782611e96565b602082019050919050565b60006020820190508181036000830152611efb81611ebf565b9050919050565b7f576f726b65722069732061637469766500000000000000000000000000000000600082015250565b6000611f38601083611e85565b9150611f4382611f02565b602082019050919050565b60006020820190508181036000830152611f6781611f2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fa882611a9b565b9150611fb383611a9b565b925082820190506fffffffffffffffffffffffffffffffff811115611fdb57611fda611f6e565b5b92915050565b7f576f726b6572206973206c6f636b656400000000000000000000000000000000600082015250565b6000612017601083611e85565b915061202282611fe1565b602082019050919050565b600060208201905081810360008301526120468161200a565b9050919050565b60006040820190506120626000830185611d89565b61206f60208301846119a8565b9392505050565b60008115159050919050565b61208b81612076565b811461209657600080fd5b50565b6000815190506120a881612082565b92915050565b6000602082840312156120c4576120c36116e7565b5b60006120d284828501612099565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061215157607f821691505b6020821081036121645761216361210a565b5b50919050565b60006121758261199e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121a7576121a6611f6e565b5b600182019050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b60006121e8601383611e85565b91506121f3826121b2565b602082019050919050565b60006020820190508181036000830152612217816121db565b9050919050565b7f5065657220494420746f6f206c61726765000000000000000000000000000000600082015250565b6000612254601183611e85565b915061225f8261221e565b602082019050919050565b6000602082019050818103600083015261228381612247565b9050919050565b7f576f726b657220616c7265616479207265676973746572656400000000000000600082015250565b60006122c0601983611e85565b91506122cb8261228a565b602082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261231b565b612362868361231b565b95508019841693508086168417925050509392505050565b600061239561239061238b8461199e565b611d0f565b61199e565b9050919050565b6000819050919050565b6123af8361237a565b6123c36123bb8261239c565b848454612328565b825550505050565b600090565b6123d86123cb565b6123e38184846123a6565b505050565b5b81811015612407576123fc6000826123d0565b6001810190506123e9565b5050565b601f82111561244c5761241d816122f6565b6124268461230b565b81016020851015612435578190505b6124496124418561230b565b8301826123e8565b50505b505050565b600082821c905092915050565b600061246f60001984600802612451565b1980831691505092915050565b6000612488838361245e565b9150826002028217905092915050565b6124a182611a0d565b67ffffffffffffffff8111156124ba576124b9611817565b5b6124c48254612139565b6124cf82828561240b565b600060209050601f83116001811461250257600084156124f0578287015190505b6124fa858261247c565b865550612562565b601f198416612510866122f6565b60005b8281101561253857848901518255600182019150602085019450602081019050612513565b868310156125555784890151612551601f89168261245e565b8355505b6001600288020188555050505b505050505050565b600060608201905061257f6000830186611d89565b61258c6020830185611d89565b61259960408301846119a8565b949350505050565b60006125bc6125b76125b284611a9b565b611d0f565b61199e565b9050919050565b6125cc816125a1565b82525050565b60006020820190506125e760008301846125c3565b92915050565b7f576f726b6572206e6f7420616374697665000000000000000000000000000000600082015250565b6000612623601183611e85565b915061262e826125ed565b602082019050919050565b6000602082019050818103600083015261265281612616565b9050919050565b60006126648261199e565b915061266f8361199e565b925082820390508181111561268757612686611f6e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126f682611a9b565b915061270183611a9b565b925082612711576127106126bc565b5b828204905092915050565b600061272782611a9b565b915061273283611a9b565b925082820261274081611a9b565b915080821461275257612751611f6e565b5b509291505056fea2646970667358221220ab8730f32b2144a8b94ca81c10edc6b7bf1396c0a9bb4d332d64c94a50617ed964736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637d46b1f21161008c578063b4d0a56411610066578063b4d0a5641461024d578063bcacc70a14610269578063f1a22dc214610287578063f905aaf6146102bb576100ea565b80637d46b1f2146101e357806382fbdc9c14610213578063a0f395d61461022f576100ea565b80633e556827116100c85780633e556827146101595780633fd8b02f1461017757806357d775f81461019557806363e996d2146101b3576100ea565b80630968f264146100ef5780630dad312b1461010b578063393bc3d91461013b575b600080fd5b61010960048036038101906101049190611756565b6102d9565b005b61012560048036038101906101209190611942565b61066d565b60405161013291906119b7565b60405180910390f35b6101436106a8565b6040516101509190611bd2565b60405180910390f35b61016161093f565b60405161016e91906119b7565b60405180910390f35b61017f6109ca565b60405161018c9190611c03565b60405180910390f35b61019d6109ee565b6040516101aa9190611c03565b60405180910390f35b6101cd60048036038101906101c89190611c4a565b610a12565b6040516101da91906119b7565b60405180910390f35b6101fd60048036038101906101f89190611c4a565b610a36565b60405161020a9190611ced565b60405180910390f35b61022d60048036038101906102289190611756565b610c54565b005b6102376110d9565b6040516102449190611d6e565b60405180910390f35b61026760048036038101906102629190611756565b6110fd565b005b61027161139e565b60405161027e91906119b7565b60405180910390f35b6102a1600480360381019061029c9190611c4a565b6113ac565b6040516102b2959493929190611de2565b60405180910390f35b6102c36114c2565b6040516102d091906119b7565b60405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838360405161032a929190611e6c565b90815260200160405180910390205490506000810361037e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037590611ee2565b60405180910390fd5b600060026000838152602001908152602001600020905061039e816114cf565b156103de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d590611f4e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160030160109054906101000a90046fffffffffffffffffffffffffffffffff1661042a9190611f9d565b6fffffffffffffffffffffffffffffffff1643101561047e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104759061202d565b60405180910390fd5b60008160020154905060026000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006104d29190611617565b60028201600090556003820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556003820160106101000a8154906fffffffffffffffffffffffffffffffff02191690555050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208585604051610571929190611e6c565b90815260200160405180910390206000905560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016105de92919061204d565b6020604051808303816000875af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062191906120ae565b503373ffffffffffffffffffffffffffffffffffffffff16837fb6ee3a0ef8982f0f296a13a075fe56e5fd8c1bc2282a3c5b54f12d514ed7a95660405160405180910390a35050505050565b600360205281600052604060002081805160208101820180518482526020830160208501208183528095505050505050600091509150505481565b606060006106b461093f565b67ffffffffffffffff8111156106cd576106cc611817565b5b60405190808252806020026020018201604052801561070657816020015b6106f3611657565b8152602001906001900390816106eb5790505b5090506000805b600480549050811015610936576000600482815481106107305761072f6120db565b5b90600052602060002001549050600060026000838152602001908152602001600020905061075d816114cf565b1561092157806040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546107d490612139565b80601f016020809104026020016040519081016040528092919081815260200182805461080090612139565b801561084d5780601f106108225761010080835404028352916020019161084d565b820191906000526020600020905b81548152906001019060200180831161083057829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050858581518110610907576109066120db565b5b6020026020010181905250838061091d9061216a565b9450505b5050808061092e9061216a565b91505061070d565b50819250505090565b6000806000905060005b6004805490508110156109c25760006004828154811061096c5761096b6120db565b5b906000526020600020015490506000600260008381526020019081526020016000209050610999816114cf565b156109ad5783806109a99061216a565b9450505b505080806109ba9061216a565b915050610949565b508091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60048181548110610a2257600080fd5b906000526020600020016000915090505481565b610a3e611657565b6004805490508210610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c906121fe565b60405180910390fd5b600060048381548110610a9b57610a9a6120db565b5b90600052602060002001549050600260008281526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610b2c90612139565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5890612139565b8015610ba55780601f10610b7a57610100808354040283529160200191610ba5565b820191906000526020600020905b815481529060010190602001808311610b8857829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050915050919050565b6040828290501115610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c929061226a565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208383604051610cec929190611e6c565b90815260200160405180910390205414610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d32906122d6565b60405180910390fd5b610d456001611589565b6000610d51600161159f565b90506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200169152d02c7e14af68000008152602001610ddc6115ad565b6fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081610e799190612498565b506040820151816002015560608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555090505080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208484604051610f55929190611e6c565b908152602001604051809103902081905550600481908060018154018082558091505060019003906000526020600020016000909190919091505560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333069152d02c7e14af68000006040518463ffffffff1660e01b8152600401610ff79392919061256a565b6020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a91906120ae565b503373ffffffffffffffffffffffffffffffffffffffff168383604051611062929190611e6c565b6040518091039020827fe6c84295c123762f302ffd57e3ba60e58ec0fe975ed75209a8b9cbaee2934a176002600086815260200190815260200160002060030160009054906101000a90046fffffffffffffffffffffffffffffffff166040516110cc91906125d2565b60405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838360405161114e929190611e6c565b9081526020016040518091039020549050600081036111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990611ee2565b60405180910390fd5b6111bd600260008381526020019081526020016000206114cf565b6111fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f390612639565b60405180910390fd5b6112046115ad565b6002600083815260200190815260200160002060030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060005b600480549050811015611317578160048281548110611275576112746120db565b5b90600052602060002001540361130457600460016004805490506112999190612659565b815481106112aa576112a96120db565b5b9060005260206000200154600482815481106112c9576112c86120db565b5b906000526020600020018190555060048054806112e9576112e861268d565b5b60019003818190600052602060002001600090559055611317565b808061130f9061216a565b915050611253565b503373ffffffffffffffffffffffffffffffffffffffff16817f4a7ca6c9178181481ac5c6e9ed0965213ae489c4aaf53323bd5e1f318a9d77c36002600085815260200190815260200160002060030160109054906101000a90046fffffffffffffffffffffffffffffffff1660405161139191906125d2565b60405180910390a3505050565b69152d02c7e14af680000081565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546113f590612139565b80601f016020809104026020016040519081016040528092919081815260200182805461142190612139565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b5050505050908060020154908060030160009054906101000a90046fffffffffffffffffffffffffffffffff16908060030160109054906101000a90046fffffffffffffffffffffffffffffffff16905085565b6000600480549050905090565b6000438260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611158015611582575060008260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1614806115815750438260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b5b9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b60007f000000000000000000000000000000000000000000000000000000000000000060017f0000000000000000000000000000000000000000000000000000000000000000436115fe91906126eb565b6116089190611f9d565b611612919061271c565b905090565b50805461162390612139565b6000825580601f106116355750611654565b601f01602090049060005260206000209081019061165391906116c0565b5b50565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b5b808211156116d95760008160009055506001016116c1565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611716576117156116f1565b5b8235905067ffffffffffffffff811115611733576117326116f6565b5b60208301915083600182028301111561174f5761174e6116fb565b5b9250929050565b6000806020838503121561176d5761176c6116e7565b5b600083013567ffffffffffffffff81111561178b5761178a6116ec565b5b61179785828601611700565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ce826117a3565b9050919050565b6117de816117c3565b81146117e957600080fd5b50565b6000813590506117fb816117d5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61184f82611806565b810181811067ffffffffffffffff8211171561186e5761186d611817565b5b80604052505050565b60006118816116dd565b905061188d8282611846565b919050565b600067ffffffffffffffff8211156118ad576118ac611817565b5b6118b682611806565b9050602081019050919050565b82818337600083830152505050565b60006118e56118e084611892565b611877565b90508281526020810184848401111561190157611900611801565b5b61190c8482856118c3565b509392505050565b600082601f830112611929576119286116f1565b5b81356119398482602086016118d2565b91505092915050565b60008060408385031215611959576119586116e7565b5b6000611967858286016117ec565b925050602083013567ffffffffffffffff811115611988576119876116ec565b5b61199485828601611914565b9150509250929050565b6000819050919050565b6119b18161199e565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611a07816117c3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a47578082015181840152602081019050611a2c565b60008484015250505050565b6000611a5e82611a0d565b611a688185611a18565b9350611a78818560208601611a29565b611a8181611806565b840191505092915050565b611a958161199e565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611ac081611a9b565b82525050565b600060a083016000830151611ade60008601826119fe565b5060208301518482036020860152611af68282611a53565b9150506040830151611b0b6040860182611a8c565b506060830151611b1e6060860182611ab7565b506080830151611b316080860182611ab7565b508091505092915050565b6000611b488383611ac6565b905092915050565b6000602082019050919050565b6000611b68826119d2565b611b7281856119dd565b935083602082028501611b84856119ee565b8060005b85811015611bc05784840389528151611ba18582611b3c565b9450611bac83611b50565b925060208a01995050600181019050611b88565b50829750879550505050505092915050565b60006020820190508181036000830152611bec8184611b5d565b905092915050565b611bfd81611a9b565b82525050565b6000602082019050611c186000830184611bf4565b92915050565b611c278161199e565b8114611c3257600080fd5b50565b600081359050611c4481611c1e565b92915050565b600060208284031215611c6057611c5f6116e7565b5b6000611c6e84828501611c35565b91505092915050565b600060a083016000830151611c8f60008601826119fe565b5060208301518482036020860152611ca78282611a53565b9150506040830151611cbc6040860182611a8c565b506060830151611ccf6060860182611ab7565b506080830151611ce26080860182611ab7565b508091505092915050565b60006020820190508181036000830152611d078184611c77565b905092915050565b6000819050919050565b6000611d34611d2f611d2a846117a3565b611d0f565b6117a3565b9050919050565b6000611d4682611d19565b9050919050565b6000611d5882611d3b565b9050919050565b611d6881611d4d565b82525050565b6000602082019050611d836000830184611d5f565b92915050565b611d92816117c3565b82525050565b600082825260208201905092915050565b6000611db482611a0d565b611dbe8185611d98565b9350611dce818560208601611a29565b611dd781611806565b840191505092915050565b600060a082019050611df76000830188611d89565b8181036020830152611e098187611da9565b9050611e1860408301866119a8565b611e256060830185611bf4565b611e326080830184611bf4565b9695505050505050565b600081905092915050565b6000611e538385611e3c565b9350611e608385846118c3565b82840190509392505050565b6000611e79828486611e47565b91508190509392505050565b600082825260208201905092915050565b7f576f726b6572206e6f7420726567697374657265640000000000000000000000600082015250565b6000611ecc601583611e85565b9150611ed782611e96565b602082019050919050565b60006020820190508181036000830152611efb81611ebf565b9050919050565b7f576f726b65722069732061637469766500000000000000000000000000000000600082015250565b6000611f38601083611e85565b9150611f4382611f02565b602082019050919050565b60006020820190508181036000830152611f6781611f2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fa882611a9b565b9150611fb383611a9b565b925082820190506fffffffffffffffffffffffffffffffff811115611fdb57611fda611f6e565b5b92915050565b7f576f726b6572206973206c6f636b656400000000000000000000000000000000600082015250565b6000612017601083611e85565b915061202282611fe1565b602082019050919050565b600060208201905081810360008301526120468161200a565b9050919050565b60006040820190506120626000830185611d89565b61206f60208301846119a8565b9392505050565b60008115159050919050565b61208b81612076565b811461209657600080fd5b50565b6000815190506120a881612082565b92915050565b6000602082840312156120c4576120c36116e7565b5b60006120d284828501612099565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061215157607f821691505b6020821081036121645761216361210a565b5b50919050565b60006121758261199e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036121a7576121a6611f6e565b5b600182019050919050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b60006121e8601383611e85565b91506121f3826121b2565b602082019050919050565b60006020820190508181036000830152612217816121db565b9050919050565b7f5065657220494420746f6f206c61726765000000000000000000000000000000600082015250565b6000612254601183611e85565b915061225f8261221e565b602082019050919050565b6000602082019050818103600083015261228381612247565b9050919050565b7f576f726b657220616c7265616479207265676973746572656400000000000000600082015250565b60006122c0601983611e85565b91506122cb8261228a565b602082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261231b565b612362868361231b565b95508019841693508086168417925050509392505050565b600061239561239061238b8461199e565b611d0f565b61199e565b9050919050565b6000819050919050565b6123af8361237a565b6123c36123bb8261239c565b848454612328565b825550505050565b600090565b6123d86123cb565b6123e38184846123a6565b505050565b5b81811015612407576123fc6000826123d0565b6001810190506123e9565b5050565b601f82111561244c5761241d816122f6565b6124268461230b565b81016020851015612435578190505b6124496124418561230b565b8301826123e8565b50505b505050565b600082821c905092915050565b600061246f60001984600802612451565b1980831691505092915050565b6000612488838361245e565b9150826002028217905092915050565b6124a182611a0d565b67ffffffffffffffff8111156124ba576124b9611817565b5b6124c48254612139565b6124cf82828561240b565b600060209050601f83116001811461250257600084156124f0578287015190505b6124fa858261247c565b865550612562565b601f198416612510866122f6565b60005b8281101561253857848901518255600182019150602085019450602081019050612513565b868310156125555784890151612551601f89168261245e565b8355505b6001600288020188555050505b505050505050565b600060608201905061257f6000830186611d89565b61258c6020830185611d89565b61259960408301846119a8565b949350505050565b60006125bc6125b76125b284611a9b565b611d0f565b61199e565b9050919050565b6125cc816125a1565b82525050565b60006020820190506125e760008301846125c3565b92915050565b7f576f726b6572206e6f7420616374697665000000000000000000000000000000600082015250565b6000612623601183611e85565b915061262e826125ed565b602082019050919050565b6000602082019050818103600083015261265281612616565b9050919050565b60006126648261199e565b915061266f8361199e565b925082820390508181111561268757612686611f6e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006126f682611a9b565b915061270183611a9b565b925082612711576127106126bc565b5b828204905092915050565b600061272782611a9b565b915061273283611a9b565b925082820261274081611a9b565b915080821461275257612751611f6e565b5b509291505056fea2646970667358221220ab8730f32b2144a8b94ca81c10edc6b7bf1396c0a9bb4d332d64c94a50617ed964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1119,
        "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
        "label": "tSQD",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)664"
      },
      {
        "astId": 1126,
        "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
        "label": "workerIdTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)717_storage"
      },
      {
        "astId": 1142,
        "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
        "label": "workers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Worker)1137_storage)"
      },
      {
        "astId": 1148,
        "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
        "label": "workerIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes_memory_ptr,t_uint256))"
      },
      {
        "astId": 1151,
        "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
        "label": "activeWorkerIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)664": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Worker)1137_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WorkerRegistration.Worker)",
        "numberOfBytes": "32",
        "value": "t_struct(Worker)1137_storage"
      },
      "t_struct(Counter)717_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 716,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Worker)1137_storage": {
        "encoding": "inplace",
        "label": "struct WorkerRegistration.Worker",
        "members": [
          {
            "astId": 1128,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1130,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1132,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1134,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "registeredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 1136,
            "contract": "contracts/WorkerRegistration.sol:WorkerRegistration",
            "label": "deregisteredAt",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}